App = Ember.Application.create();

App.Router.map(function() {
    this.resource("sessions", {path: "/"});
});

App.SessionsController = Ember.ArrayController.extend({
    actions: {
        add: function() {
            var values = {name: this.get("name")};
            var session = this.store.createEntity("Session", values);
            // How can we add this to the arbitrary list of sessions?
        },
        remove: function(session) {
            session.entityAspect.setDeleted();
            // How can we call the save function on the controller now?
        },
        save: function (session) {
            // Make a list of properties to stringify
            var replacer = ['id','name'];
            // Stringify will throw a circular reference error if we don't tell it to ignore stuff
            var thisObj = JSON.stringify(session, replacer);
            $.ajax({
              url: '/api/sessions/',
              type: 'POST',
              data: thisObj,
              success: function(data) {
                // Set the id property of the session to the id returned
                session.set('id', data.id);
                // If the call was successful, accept changes on the entity
                // and sets the entity back to unmodified state
                session.entityAspect.acceptChanges();
              }
            });
        }
    }
});

App.SessionsRoute = Ember.Route.extend({
    model: function() {
        var query = breeze.EntityQuery.from("sessions").toType("Session");
        return this.store.executeQuery(query).then(function(data) {
            return data.results;
        });
    }
});

App.BreezeStore = Ember.Object.extend({
    instance: null,
    init: function() {    
        var ds = new breeze.DataService({
            serviceName: 'api',
            hasServerMetadata: false,
            useJsonp: false
        });
        breeze.config.initializeAdapterInstance("modelLibrary", "backingStore", true);
        this.instance = new breeze.EntityManager({dataService: ds});
        this.instance.metadataStore.addEntityType({
            shortName: "Session",
            namespace: "App",
            // Tell breeze it's ok to create fake Id's for now
            // You could also pass in a function that returns
            // an Id in a callback or something here
            autoGeneratedKeyType: breeze.AutoGeneratedKeyType.Identity,
            dataProperties: {
                id: { dataType: "Int64", isPartOfKey: true },
                name: { dataType: "String" }
            }
        });
    }
});

Ember.onLoad('Ember.Application', function(Application) {

    Application.initializer({
        name: "store",

        initialize: function(container, application) {
            var store = {
                create: function() {
                    return App.BreezeStore.create().instance;
                }
            };
            application.register('store:main', store);
        }
    });

    Application.initializer({
        name: "injectStore",
        before: "store",

        initialize: function(container, application) {
            application.inject('controller', 'store', 'store:main');
            application.inject('route', 'store', 'store:main');
        }
    });

});
